

[工厂模式]

简单工厂:
	在单产品多层级分类，层级数量不多的情况下，可以使用简单工厂。
	例如学生，分文理科。学生进入简单工厂，根据分类，输出对应文科理科生。
	这就是最简单的工厂模式，它有一点点小缺陷，就是扩展性不够好。如果有一天，多了个艺术生，技术生等，就需要在代码里多加一层判断。但是这就违反了"允许扩展，拒绝修改"的开闭原则。

工厂模式:
	在简单工厂的模式下改动，不再使用一个工厂来生产，而是不同的分类使用不用的工厂来生产制造。
	同样举例学生，创建文科生专用工厂来生产文科生，再创建一个理科生专用工厂来生产理科生，两者互不影响。如果文科生需要背诵课文，那么在文科生工厂直接改动即可，这种操作不会影响到理科生，可以很大限度上的隔离了两者。如果有一天，学生可以选择当艺术生，那么我们大可直接创建一个艺术生工厂来生产艺术生，同样的，这个操作也不会影响到其他成员。
	工厂模式最大的优点就是可扩展性。

抽象工厂:
	在多产品多层级，可以使用抽象工厂。
    抽象工厂主要使用在多产品多层次分类的产品上。例如我们要生产宝马和奔驰汽车，宝马和奔驰就是2个不同的分类，汽车内包括底盘、轮胎等多产品。同一分类下的产品是互相依赖的，我们不可能让宝马轮胎装到奔驰底盘下，我们得让同一分类下的产品互相依赖组装。应运而生，保证所有产品为同一分类，就是抽象工厂模式。



弊：
工厂模式在处理多流程或者是根据上下文创建实例的情况下非常好用。但是在单一流程或者是不需要根据上下文创建对象的情况下使用反而会增加阅读成本。
所以我们应该在恰当的场景中使用工厂模式。如果拿不定主意，那就不要使用，因为在以后的重构中还有机会使用工厂模式。

