

【面向对象】

三大特性：封装，继承，多态



封装:

私有化成员变量，只对外暴露对应的操作方法，封装的主要作用是保护对象不被随意访问和修改。

1.关键字:Ts中私有化变量只需要使用，protected或private。二者的区别在于，private不可以被子类访问，而protected修饰的变量可以被子类访问。

2.对于封装后的变量，我们应该提供getter与setter方法。



继承:

被继承的类称为”父类”，通过继承创建的类称为”子类”。继承主要是保证子类和父类处于同一层次，让子类在父类的基础上重写或扩展代码，这样可以减少大量同一结构的代码。
1.子类继承父类，可以在构造函数constructor中调用super来继承父类的属性。

2.重写:子类声明与父类相同的方法时，可以重写父类的方法。

3.接口:接口是对行为的抽象。对于一些不是同类型，但是有相同行为方法的类，我们可以抽象出具体行为接口。例如:灯具和车辆，两者都有行为是开灯关灯，但是二者并非同类型物种，所以我们可以抽象出一个接口来包括开灯关灯操作，而两者只需实现该接口即可达到开灯关灯的行为。车辆对于灯具来说，可能会有远光灯和近光灯操作，但是灯具没有，对于这种情况，我们可以在抽象出一个接口，接口内容为切换近光灯和远光灯。至此，灯具实现了开灯关灯行为，车辆实现了开灯关灯和切换远近关灯。对于以上行为，可以很好的避免代码的复写，也能够在一定程度上解耦代码和扩展代码。



多态:

对于同一分类下，不同职能的类，我们称之为”多态”。多态的作用主要是重写父类的方法，让不同的类的同一方法，有着不同的作用。

例如父类”人”，他的多态子类可会有”警察，厨师，教师”等源于基类”人”而拥有不同职能的类。观察以上子类，他们都有源于父类”人”的共同方法(吃喝玩乐等)，但是他们之间又拥有不同的差异。比如”警察”的职责是维护社会治安，但”厨师”的职责是供出大家满意的饭菜。因此，继承同一父类，且重写了父类的方法，称之为”多态”。



抽象:

对于一些重复度很高的方法，我们可以抽出为一个类或者接口，让其他的类继承或者实现这个抽象。这样就可以更轻松的更改或者扩展代码。





